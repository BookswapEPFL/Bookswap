Index: app/src/main/java/com/android/bookswap/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.testTag\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport androidx.navigation.navigation\nimport com.android.bookswap.data.DataUser\nimport com.android.bookswap.data.MessageBox\nimport com.android.bookswap.data.repository.BooksRepository\nimport com.android.bookswap.data.repository.MessageRepository\nimport com.android.bookswap.data.repository.UsersRepository\nimport com.android.bookswap.data.source.network.BooksFirestoreSource\nimport com.android.bookswap.data.source.network.MessageFirestoreSource\nimport com.android.bookswap.data.source.network.UserFirestoreSource\nimport com.android.bookswap.model.UserViewModel\nimport com.android.bookswap.model.chat.PermissionHandler\nimport com.android.bookswap.model.map.BookFilter\nimport com.android.bookswap.model.map.BookManagerViewModel\nimport com.android.bookswap.model.map.DefaultGeolocation\nimport com.android.bookswap.model.map.Geolocation\nimport com.android.bookswap.model.map.IGeolocation\nimport com.android.bookswap.resources.C\nimport com.android.bookswap.ui.authentication.SignInScreen\nimport com.android.bookswap.ui.books.add.AddISBNScreen\nimport com.android.bookswap.ui.books.add.AddToBookScreen\nimport com.android.bookswap.ui.books.add.BookAdditionChoiceScreen\nimport com.android.bookswap.ui.chat.ChatScreen\nimport com.android.bookswap.ui.chat.ListChatScreen\nimport com.android.bookswap.ui.components.TopAppBarComponent\nimport com.android.bookswap.ui.map.FilterMapScreen\nimport com.android.bookswap.ui.map.MapScreen\nimport com.android.bookswap.ui.navigation.BottomNavigationMenu\nimport com.android.bookswap.ui.navigation.List_Navigation_Bar_Destinations\nimport com.android.bookswap.ui.navigation.NavigationActions\nimport com.android.bookswap.ui.navigation.Route\nimport com.android.bookswap.ui.navigation.Screen\nimport com.android.bookswap.ui.profile.UserProfile\nimport com.android.bookswap.ui.theme.BookSwapAppTheme\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.UUID\n\nclass MainActivity : ComponentActivity() {\n\n  private lateinit var permissionHandler: PermissionHandler\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    // permissionHandler = PermissionHandler(this)\n    // permissionHandler.askNotificationPermission()\n    setContent { BookSwapApp() }\n  }\n\n  @Composable\n  fun BookSwapApp() {\n\n    // Initialize a Firebase Firestore database instance\n    val db = FirebaseFirestore.getInstance()\n\n    // Create the data source objects\n    val messageRepository = MessageFirestoreSource(db)\n    val bookRepository = BooksFirestoreSource(db)\n    val userDataSource = UserFirestoreSource(db)\n\n    // Initialize the geolocation\n    val geolocation = Geolocation(this)\n    BookSwapAppTheme {\n      // A surface container using the 'background' color from the theme\n      Surface(\n          modifier = Modifier.fillMaxSize().semantics { testTag = C.Tag.main_screen_container },\n          color = MaterialTheme.colorScheme.background) {\n            BookSwapApp(\n                messageRepository, bookRepository, userDataSource, geolocation = geolocation)\n          }\n    }\n  }\n\n  @Composable\n  fun BookSwapApp(\n      messageRepository: MessageRepository,\n      bookRepository: BooksRepository,\n      userRepository: UsersRepository,\n      startDestination: String = Route.AUTH,\n      geolocation: IGeolocation = DefaultGeolocation()\n  ) {\n    val navController = rememberNavController()\n    val navigationActions = NavigationActions(navController)\n    val bookFilter = BookFilter()\n    val userVM = UserViewModel(UUID.randomUUID(), userRepository)\n    val bookManagerViewModel =\n        BookManagerViewModel(geolocation, bookRepository, userRepository, bookFilter)\n\n    val currentUserUUID = UUID.fromString(\"550e8400-e29b-41d4-a716-446655440000\")\n    val otherUserUUID = UUID.fromString(\"550e8400-e29b-41d4-a716-446655440001\")\n    val currentUser =\n        DataUser(\n            currentUserUUID,\n            \"Hello\",\n            \"Jaime\",\n            \"Oliver Pastor\",\n            \"\",\n            \"\",\n            42.5717,\n            0.5471,\n            \"https://media.istockphoto.com/id/693813718/photo/the-fortress-of-jaca-soain.jpg?s=612x612&w=0&k=20&c=MdnKl1VJIKQRwGdrGwBFx_L00vS8UVphR9J-nS6J90c=\",\n            emptyList(),\n            \"googleUid\")\n\n    val otherUser =\n        DataUser(\n            otherUserUUID,\n            \"Hey\",\n            \"ThÃ©o\",\n            \"Schlaeppi\",\n            \"\",\n            \"\",\n            46.3,\n            6.43,\n            \"https://www.shutterstock.com/image-photo/wonderful-epesses-fairtytale-village-middle-600nw-2174791585.jpg\",\n            emptyList(),\n            \"googleUid\")\n    val placeHolder =\n        listOf(MessageBox(otherUser, message = \"Welcome message for user124\", date = \"01.01.24\")) +\n            List(6) {\n              MessageBox(\n                  DataUser(\n                      UUID.randomUUID(),\n                      \"Hello\",\n                      \"First ${it + 1}\",\n                      \"Last ${it + 1}\",\n                      \"\",\n                      \"\",\n                      0.0,\n                      0.0,\n                      \"\",\n                      emptyList(),\n                      \"googleUid\"),\n                  message = \"Test message $it test for the feature of ellipsis in the message\",\n                  date = \"01.01.24\")\n            }\n    val topAppBar =\n        @Composable { s: String? ->\n          TopAppBarComponent(\n              modifier = Modifier,\n              navigationActions = navigationActions,\n              title = s ?: navigationActions.currentRoute())\n        }\n    val bottomAppBar =\n        @Composable { s: String? ->\n          BottomNavigationMenu(\n              onTabSelect = { destination -> navigationActions.navigateTo(destination) },\n              tabList = List_Navigation_Bar_Destinations,\n              selectedItem = s ?: \"\")\n        }\n\n    NavHost(navController = navController, startDestination = startDestination) {\n      navigation(startDestination = Screen.AUTH, route = Route.AUTH) {\n        composable(Screen.AUTH) { SignInScreen(navigationActions) }\n      }\n      navigation(startDestination = Screen.CHATLIST, route = Route.CHAT) {\n        composable(Screen.CHATLIST) {\n          ListChatScreen(\n              placeHolder,\n              navigationActions,\n              topAppBar = { topAppBar(\"Messages\") },\n              bottomAppBar = { bottomAppBar(this@navigation.route ?: \"\") })\n        }\n        composable(\"${Screen.CHAT}/{user2}\") { backStackEntry ->\n          val user2UUID = UUID.fromString(backStackEntry.arguments?.getString(\"user2\"))\n          val user2 = placeHolder.firstOrNull { it.contact.userUUID == user2UUID }?.contact\n\n          if (user2 != null) {\n            ChatScreen(messageRepository, currentUser, user2, navigationActions)\n          } else {\n            BookAdditionChoiceScreen(\n                navigationActions,\n                topAppBar = { topAppBar(\"Add a Book\") },\n                bottomAppBar = { bottomAppBar(this@navigation.route ?: \"\") })\n          }\n        }\n      }\n      navigation(startDestination = Screen.MAP, route = Route.MAP) {\n        composable(Screen.MAP) {\n          MapScreen(\n              bookManagerViewModel,\n              navigationActions = navigationActions,\n              geolocation = geolocation,\n              topAppBar = { topAppBar(\"Map\") },\n              bottomAppBar = { bottomAppBar(this@navigation.route ?: \"\") })\n        }\n        composable(Screen.FILTER) { FilterMapScreen(navigationActions, bookFilter) }\n      }\n      navigation(startDestination = Screen.NEWBOOK, route = Route.NEWBOOK) {\n        composable(Screen.NEWBOOK) {\n          BookAdditionChoiceScreen(\n              navigationActions,\n              topAppBar = { topAppBar(\"Add a Book\") },\n              bottomAppBar = { bottomAppBar(this@navigation.route ?: \"\") })\n        }\n        composable(Screen.ADD_BOOK_MANUALLY) {\n          AddToBookScreen(\n              bookRepository,\n              topAppBar = { topAppBar(null) },\n              bottomAppBar = { bottomAppBar(this@navigation.route ?: \"\") })\n        }\n        composable(Screen.ADD_BOOK_SCAN) { /*Todo*/}\n        composable(Screen.ADD_BOOK_ISBN) {\n          AddISBNScreen(\n              navigationActions,\n              bookRepository,\n              topAppBar = { topAppBar(null) },\n              bottomAppBar = { bottomAppBar(this@navigation.route ?: \"\") })\n        }\n      }\n      navigation(startDestination = Screen.PROFILE, route = Route.PROFILE) {\n        composable(Screen.PROFILE) { UserProfile(userVM) }\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/MainActivity.kt b/app/src/main/java/com/android/bookswap/MainActivity.kt
--- a/app/src/main/java/com/android/bookswap/MainActivity.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/MainActivity.kt	(date 1731613845421)
@@ -95,7 +95,7 @@
     val navController = rememberNavController()
     val navigationActions = NavigationActions(navController)
     val bookFilter = BookFilter()
-    val userVM = UserViewModel(UUID.randomUUID(), userRepository)
+    val userVM = UserViewModel(UUID.randomUUID(), firebaseFirestore = FirebaseFirestore.getInstance())
     val bookManagerViewModel =
         BookManagerViewModel(geolocation, bookRepository, userRepository, bookFilter)
 
Index: app/src/main/java/com/android/bookswap/ui/books/BookProfile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap.ui.books\r\n\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowBack\r\nimport androidx.compose.material.icons.automirrored.filled.ArrowForward\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.VerticalDivider\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.testTag\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport com.android.bookswap.R\r\nimport com.android.bookswap.data.DataBook\r\nimport com.android.bookswap.ui.navigation.NavigationActions\r\nimport com.android.bookswap.ui.theme.ColorVariable\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun BookProfileScreen(\r\n    DataBook: DataBook,\r\n    navController: NavigationActions,\r\n    topAppBar: @Composable () -> Unit = {},\r\n    bottomAppBar: @Composable () -> Unit = {},\r\n) {\r\n  val columnPadding = 8.dp\r\n  val pictureWidth = (LocalConfiguration.current.screenWidthDp.dp * (0.60f))\r\n  val pictureHeight = pictureWidth * 1.41f\r\n  val buttonsHeight = pictureHeight / 12.0f\r\n  val images = listOf(R.drawable.isabellacatolica, R.drawable.felipeii)\r\n  val imagesDescription = listOf(\"Isabel La Catolica\", \"Felipe II\")\r\n  var currentImageIndex by remember { mutableIntStateOf(0) }\r\n  Scaffold(\r\n      modifier = Modifier.testTag(\"bookProfileScreen\"),\r\n      topBar = topAppBar,\r\n      bottomBar = bottomAppBar) { innerPadding ->\r\n        LazyColumn(\r\n            modifier =\r\n                Modifier.fillMaxSize()\r\n                    .padding(innerPadding)\r\n                    .background(ColorVariable.BackGround)\r\n                    .testTag(\"bookProfileScroll\"),\r\n            verticalArrangement = Arrangement.spacedBy(columnPadding),\r\n            horizontalAlignment = Alignment.CenterHorizontally) {\r\n              item {\r\n                Text(\r\n                    text = DataBook.title,\r\n                    modifier = Modifier.testTag(\"bookTitle\").padding(columnPadding),\r\n                    color = ColorVariable.Accent,\r\n                    style = MaterialTheme.typography.titleLarge)\r\n              }\r\n              item {\r\n                Text(\r\n                    text = DataBook.author ?: \"Author Unknown\",\r\n                    modifier = Modifier.testTag(\"bookAuthor\"),\r\n                    color = ColorVariable.AccentSecondary,\r\n                    style = MaterialTheme.typography.titleMedium)\r\n              }\r\n              item { Spacer(modifier = Modifier.height(columnPadding)) }\r\n              item {\r\n                Box(\r\n                    modifier =\r\n                        Modifier.size(pictureWidth, pictureHeight)\r\n                            .background(ColorVariable.BackGround)) {\r\n                      Image(\r\n                          painter = painterResource(id = images[currentImageIndex]),\r\n                          contentDescription = imagesDescription[currentImageIndex],\r\n                          modifier =\r\n                              Modifier.height(pictureHeight)\r\n                                  .fillMaxWidth()\r\n                                  .testTag(\r\n                                      \"bookProfileImage ${imagesDescription[currentImageIndex]}\"))\r\n                    }\r\n              }\r\n              item {\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp),\r\n                    verticalAlignment = Alignment.CenterVertically,\r\n                    horizontalArrangement = Arrangement.SpaceBetween) {\r\n                      IconButton(\r\n                          onClick = {\r\n                            currentImageIndex = (currentImageIndex - 1 + images.size) % images.size\r\n                          },\r\n                          modifier =\r\n                              Modifier.height(buttonsHeight).testTag(\"bookProfileImageLeft\")) {\r\n                            Icon(\r\n                                imageVector = Icons.AutoMirrored.Filled.ArrowBack,\r\n                                contentDescription = \"Previous Image\",\r\n                                tint = ColorVariable.Accent)\r\n                          }\r\n                      Text(\r\n                          text = imagesDescription[currentImageIndex],\r\n                          color = ColorVariable.AccentSecondary,\r\n                          modifier = Modifier.padding(horizontal = 8.dp))\r\n                      IconButton(\r\n                          onClick = { currentImageIndex = (currentImageIndex + 1) % images.size },\r\n                          modifier =\r\n                              Modifier.height(buttonsHeight).testTag(\"bookProfileImageRight\")) {\r\n                            Icon(\r\n                                imageVector = Icons.AutoMirrored.Filled.ArrowForward,\r\n                                contentDescription = \"Next Image\",\r\n                                tint = ColorVariable.Accent)\r\n                          }\r\n                    }\r\n              }\r\n              item { Spacer(modifier = Modifier.height(columnPadding)) }\r\n              item {\r\n                DataBook.rating?.let {\r\n                  Text(\r\n                      text = \"Rating: $it/10\",\r\n                      color = ColorVariable.Accent,\r\n                      style = MaterialTheme.typography.bodyMedium,\r\n                      modifier = Modifier.padding(vertical = 8.dp).testTag(\"bookProfileRating\"))\r\n                }\r\n              }\r\n              item { Spacer(modifier = Modifier.height(columnPadding)) }\r\n              item {\r\n                Text(\r\n                    text = \"Synopsis\",\r\n                    color = ColorVariable.Accent,\r\n                    style = MaterialTheme.typography.titleSmall,\r\n                    modifier =\r\n                        Modifier.padding(vertical = 8.dp).testTag(\"bookProfileSynopsisTitle\"))\r\n              }\r\n              item {\r\n                Text(\r\n                    text = DataBook.description ?: \"No description available\",\r\n                    color = ColorVariable.Accent,\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    modifier = Modifier.padding(vertical = 8.dp).testTag(\"bookProfileSynopsis\"),\r\n                    textAlign = TextAlign.Center)\r\n              }\r\n              item { Spacer(modifier = Modifier.height(columnPadding)) }\r\n              item {\r\n                Row(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)) {\r\n                  Column(modifier = Modifier.weight(1f)) {\r\n                    ProfileText(\r\n                        text = \"Language: ${DataBook.language.languageCode}\",\r\n                        testTag = \"bookProfileLanguage\")\r\n                    ProfileText(text = \"Genres:\", testTag = \"bookProfileGenresTitle\")\r\n                    DataBook.genres.forEach { genre ->\r\n                      Text(\r\n                          text = \"- ${genre.Genre}\",\r\n                          color = ColorVariable.AccentSecondary,\r\n                          style = MaterialTheme.typography.bodyMedium,\r\n                          modifier =\r\n                              Modifier.padding(top = 2.dp, start = 16.dp)\r\n                                  .testTag(\"bookProfileGenre${genre.Genre}\"))\r\n                    }\r\n                    ProfileText(\r\n                        text = \"ISBN: ${DataBook.isbn ?: \"ISBN doesn't exist or is not available\"}\",\r\n                        testTag = \"bookProfileISBN\")\r\n                  }\r\n\r\n                  VerticalDivider(color = ColorVariable.Accent, thickness = 1.dp)\r\n\r\n                  Column(modifier = Modifier.weight(1f)) {\r\n                    ProfileText(\r\n                        text = \"Date of Publication: [Temporary Date]\", testTag = \"bookProfileDate\")\r\n                    ProfileText(text = \"Volume: [Temporary Volume]\", testTag = \"bookProfileVolume\")\r\n                    ProfileText(text = \"Issue: [Temporary Issue]\", testTag = \"bookProfileIssue\")\r\n                    ProfileText(\r\n                        text = \"Editorial: [Temporary Editorial]\", testTag = \"bookProfileEditorial\")\r\n                    ProfileText(\r\n                        text = \"Place of Edition: [Temporary Place]\",\r\n                        testTag = \"bookProfileEditionPlace\")\r\n                  }\r\n                }\r\n              }\r\n            }\r\n      }\r\n}\r\n\r\n@Composable\r\nfun ProfileText(text: String, testTag: String) {\r\n  Text(\r\n      text = text,\r\n      color = ColorVariable.Accent,\r\n      style = MaterialTheme.typography.bodyMedium,\r\n      modifier = Modifier.padding(vertical = 8.dp).testTag(testTag))\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/ui/books/BookProfile.kt b/app/src/main/java/com/android/bookswap/ui/books/BookProfile.kt
--- a/app/src/main/java/com/android/bookswap/ui/books/BookProfile.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/ui/books/BookProfile.kt	(date 1731613845425)
@@ -37,14 +37,12 @@
 import androidx.compose.ui.unit.dp
 import com.android.bookswap.R
 import com.android.bookswap.data.DataBook
-import com.android.bookswap.ui.navigation.NavigationActions
 import com.android.bookswap.ui.theme.ColorVariable
 
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun BookProfileScreen(
     DataBook: DataBook,
-    navController: NavigationActions,
     topAppBar: @Composable () -> Unit = {},
     bottomAppBar: @Composable () -> Unit = {},
 ) {
Index: app/src/main/java/com/android/bookswap/data/repository/BookRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap.data.repository\n\nimport com.android.bookswap.data.DataBook\nimport java.util.UUID\n\n/** Interface defining a contract for managing book-related operations in a repository. */\ninterface BooksRepository {\n\n  /**\n   * Function to initialize the repository. This can be used to set up data or resources. This\n   * default implementation does nothing, but subclasses can override it.\n   */\n  fun init(onSuccess: () -> Unit)\n\n  /**\n   * Function to generate and return a new unique identifier (UUID) for a book. This default\n   * implementation returns an empty string, but it should be overridden to generate actual UUIDs.\n   */\n  fun getNewUUID(): UUID\n\n  /**\n   * Function to fetch a list of books from the repository.\n   *\n   * @param callback A callback function that receives the list of books when the operation succeeds\n   *   or an exception if it fails\n   */\n  fun getBook(callback: (Result<List<DataBook>>) -> Unit)\n\n  /**\n   * Function to add a new book to the repository\n   *\n   * @param dataBook The book data to be added\n   * @param callback A callback function that receives an exception if the operation fails\n   */\n  fun addBook(dataBook: DataBook, callback: (Result<Unit>) -> Unit)\n\n  /**\n   * Function to update an existing book in the repository.\n   *\n   * @param dataBook The book data to be updated\n   * @param callback A callback function that receives an exception if the operation fails\n   */\n  fun updateBook(dataBook: DataBook, callback: (Result<Unit>) -> Unit)\n\n  /**\n   * Function to delete a book from the repository.\n   *\n   * @param uuid The unique identifier of the book to be deleted.\n   * @param dataBook The book data to be deleted (can also just use the uuid).\n   * @param callback A callback function that receives an exception if the operation fails.\n   */\n  fun deleteBooks(uuid: UUID, dataBook: DataBook, callback: (Result<Unit>) -> Unit)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/data/repository/BookRepository.kt b/app/src/main/java/com/android/bookswap/data/repository/BookRepository.kt
--- a/app/src/main/java/com/android/bookswap/data/repository/BookRepository.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/data/repository/BookRepository.kt	(date 1731613845427)
@@ -50,4 +50,6 @@
    * @param callback A callback function that receives an exception if the operation fails.
    */
   fun deleteBooks(uuid: UUID, dataBook: DataBook, callback: (Result<Unit>) -> Unit)
+
+  fun getBooksList(bookList: List<UUID>, callback: (Result<Unit>) -> Unit): List<DataBook>
 }
Index: app/src/main/java/com/android/bookswap/ui/profile/UserProfile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap.ui.profile\n\nimport androidx.compose.foundation.*\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.consumeWindowInsets\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Edit\nimport androidx.compose.material.icons.rounded.AccountCircle\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clipToBounds\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.platform.testTag\nimport androidx.compose.ui.unit.dp\nimport com.android.bookswap.model.UserViewModel\nimport com.android.bookswap.ui.components.ButtonComponent\nimport com.android.bookswap.ui.theme.*\n\n@Composable\nfun UserProfile(\n    userVM: UserViewModel = UserViewModel(java.util.UUID.randomUUID()),\n    topAppBar: @Composable () -> Unit = {},\n    bottomAppBar: @Composable () -> Unit = {}\n) {\n\n  var user = userVM.getUser()\n  var showEditProfile by remember { mutableStateOf(false) }\n\n  var needRecompose by remember { mutableStateOf(false) }\n\n  if (showEditProfile) {\n    EditProfileDialog(\n        onDismiss = {\n          showEditProfile = false\n          needRecompose = true\n        },\n        onSave = {\n          userVM.updateUser(\n              greeting = it.greeting,\n              firstName = it.firstName,\n              lastName = it.lastName,\n              email = it.email,\n              phone = it.phoneNumber,\n              user.latitude,\n              user.longitude,\n              picURL = user.profilePictureUrl)\n          showEditProfile = false\n          needRecompose = true\n        },\n        dataUser = user)\n  }\n\n  LaunchedEffect(userVM.uuid, needRecompose) {\n    user = userVM.getUser()\n    needRecompose = false\n  }\n\n  // Scaffold to provide basic UI structure with a top app bar\n  Scaffold(\n      modifier = Modifier.testTag(\"profileScreenContainer\"),\n      topBar = topAppBar,\n      bottomBar = bottomAppBar) {\n        // Column layout to stack input fields vertically with spacing\n        Row(\n            modifier = Modifier.padding(it).consumeWindowInsets(it).fillMaxWidth(),\n            horizontalArrangement = Arrangement.spacedBy(5f.dp)) {\n              Column(modifier = Modifier.fillMaxWidth(0.25f)) {\n                Box {\n                  IconButton(\n                      onClick = { /*TODO: Edit profile picture*/},\n                      modifier = Modifier.aspectRatio(1f)) {\n                        Box(\n                            modifier =\n                                Modifier.padding(2.5f.dp)\n                                    .border(3.5f.dp, Color(0xFFA98467), CircleShape)) {\n                              Image(\n                                  imageVector = Icons.Rounded.AccountCircle,\n                                  contentDescription = \"\",\n                                  modifier = Modifier.fillMaxSize().scale(1.2f).clipToBounds(),\n                                  colorFilter = ColorFilter.tint(Color(0xFF6C584C)))\n                            }\n                        Box(\n                            modifier = Modifier.fillMaxSize().padding(0f.dp),\n                            contentAlignment = Alignment.TopEnd) {\n                              Image(\n                                  imageVector = Icons.Outlined.Edit,\n                                  contentDescription = \"\",\n                                  colorFilter = ColorFilter.tint(Color(0xFFAAAAAA)))\n                            }\n                      }\n                }\n              }\n              Column(Modifier.fillMaxHeight().fillMaxWidth(), Arrangement.spacedBy(8.dp)) {\n                // Full name text\n                Text(\n                    text = \"${user.greeting} ${user.firstName} ${user.lastName}\",\n                    modifier = Modifier.testTag(\"fullNameTxt\"))\n\n                // Email text\n                Text(text = user.email, modifier = Modifier.testTag(\"emailTxt\"))\n\n                // Phone number text\n                Text(text = user.phoneNumber, modifier = Modifier.testTag(\"phoneNumberTxt\"))\n\n                // User address\n                Text(\n                    text = \"${user.latitude}, ${user.longitude}\",\n                    modifier = Modifier.testTag(\"addressTxt\"))\n\n                // Edit Button\n                ButtonComponent({ showEditProfile = true }, Modifier.testTag(\"editProfileBtn\")) {\n                  Text(\"Edit Profile\")\n                }\n              }\n            }\n      }\n}\n\n// @Preview(showBackground = true, widthDp = 540, heightDp = 1110)\n// @Composable\n// fun UserProfilePreview() {\n//  val userVM = UserViewModel(\"\")\n//  userVM.updateUser(\n//    DataUser(\n//      \"M.\",\n//      \"John\",\n//      \"Doe\",\n//      \"John.Doe@example.com\",\n//      \"+41223456789\",\n//      0.0,\n//      0.0,\n//      \"dummyPic.png\",\n//      \"dummyUUID0000\")\n//  )\n//  UserProfile(userVM)\n// }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/ui/profile/UserProfile.kt b/app/src/main/java/com/android/bookswap/ui/profile/UserProfile.kt
--- a/app/src/main/java/com/android/bookswap/ui/profile/UserProfile.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/ui/profile/UserProfile.kt	(date 1731613845429)
@@ -26,12 +26,15 @@
 import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.unit.dp
 import com.android.bookswap.model.UserViewModel
+import com.android.bookswap.ui.components.BookListComponent
 import com.android.bookswap.ui.components.ButtonComponent
 import com.android.bookswap.ui.theme.*
+import com.google.firebase.firestore.FirebaseFirestore
 
 @Composable
 fun UserProfile(
-    userVM: UserViewModel = UserViewModel(java.util.UUID.randomUUID()),
+    userVM: UserViewModel =
+        UserViewModel(java.util.UUID.randomUUID(), FirebaseFirestore.getInstance()),
     topAppBar: @Composable () -> Unit = {},
     bottomAppBar: @Composable () -> Unit = {}
 ) {
@@ -126,6 +129,8 @@
                 }
               }
             }
+        BookListComponent(
+            modifier = Modifier.fillMaxWidth().padding(8.dp), bookList = userVM.getBooks())
       }
 }
 
Index: app/src/main/java/com/android/bookswap/model/userViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap.model\n\nimport androidx.lifecycle.ViewModel\nimport com.android.bookswap.data.DataUser\nimport com.android.bookswap.data.repository.UsersRepository\nimport com.android.bookswap.data.source.network.UserFirestoreSource\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.UUID\n\nopen class UserViewModel(\n    var uuid: UUID,\n    repository: UsersRepository = UserFirestoreSource(FirebaseFirestore.getInstance())\n) : ViewModel() {\n  private var dataUser = DataUser(uuid)\n  private var isLoaded = false\n  var isStored = false\n  private val userRepository: UsersRepository = repository\n\n  open fun getUser(force: Boolean = false): DataUser {\n    if (!isLoaded || force) {\n      fetchUser()\n    }\n    return dataUser\n  }\n\n  private fun fetchUser() {\n    userRepository.getUser(uuid) { result ->\n      result.onSuccess {\n        dataUser = it\n        isLoaded = true\n        isStored = true\n      }\n    }\n  }\n\n  fun updateUser(\n      greeting: String = dataUser.greeting,\n      firstName: String = dataUser.firstName,\n      lastName: String = dataUser.lastName,\n      email: String = dataUser.email,\n      phone: String = dataUser.phoneNumber,\n      latitude: Double = dataUser.latitude,\n      longitude: Double = dataUser.longitude,\n      picURL: String = dataUser.profilePictureUrl,\n      bookList: List<UUID> = dataUser.bookList,\n      googleUid: String = dataUser.googleUid\n  ) {\n    updateUser(\n        DataUser(\n            uuid,\n            greeting,\n            firstName,\n            lastName,\n            email,\n            phone,\n            latitude,\n            longitude,\n            picURL,\n            bookList,\n            googleUid))\n  }\n\n  fun updateUser(newDataUser: DataUser) {\n    this.dataUser = newDataUser\n    this.uuid = newDataUser.userUUID\n    isLoaded = true\n    userRepository.updateUser(dataUser) { result ->\n      result.fold({ isStored = true }, { isStored = false })\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/model/userViewModel.kt b/app/src/main/java/com/android/bookswap/model/userViewModel.kt
--- a/app/src/main/java/com/android/bookswap/model/userViewModel.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/model/userViewModel.kt	(date 1731613845433)
@@ -1,16 +1,21 @@
 package com.android.bookswap.model
 
 import androidx.lifecycle.ViewModel
+import com.android.bookswap.data.DataBook
 import com.android.bookswap.data.DataUser
+import com.android.bookswap.data.repository.BooksRepository
 import com.android.bookswap.data.repository.UsersRepository
+import com.android.bookswap.data.source.network.BooksFirestoreSource
 import com.android.bookswap.data.source.network.UserFirestoreSource
 import com.google.firebase.firestore.FirebaseFirestore
 import java.util.UUID
 
 open class UserViewModel(
     var uuid: UUID,
-    repository: UsersRepository = UserFirestoreSource(FirebaseFirestore.getInstance())
+    firebaseFirestore: FirebaseFirestore,
 ) : ViewModel() {
+  val repository: UsersRepository = UserFirestoreSource(firebaseFirestore)
+  val booksRepository: BooksRepository = BooksFirestoreSource(firebaseFirestore)
   private var dataUser = DataUser(uuid)
   private var isLoaded = false
   var isStored = false
@@ -68,4 +73,8 @@
       result.fold({ isStored = true }, { isStored = false })
     }
   }
+
+  fun getBooks(): List<DataBook> {
+    return booksRepository.getBooksList(dataUser.bookList, {})
+  }
 }
Index: app/src/main/java/com/android/bookswap/ui/components/BookListComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap.ui.components\n\nimport androidx.compose.foundation.gestures.ScrollableDefaults\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.lazy.rememberLazyListState\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.testTag\nimport androidx.compose.ui.unit.Dp\nimport com.android.bookswap.data.DataBook\n\nval DIVIDER_THICKNESS_DP = Dp.Hairline\n\n@Composable\nfun BookListComponent(\n    modifier: Modifier = Modifier,\n    bookList: List<DataBook> = emptyList(),\n) {\n  LazyColumn(\n      modifier = modifier.fillMaxWidth().testTag(\"BookListColumn\"),\n      state = rememberLazyListState(),\n      contentPadding = PaddingValues(PADDING_HORIZONTAL_DP, PADDING_VERTICAL_DP),\n      horizontalAlignment = Alignment.CenterHorizontally,\n      flingBehavior = ScrollableDefaults.flingBehavior(),\n      userScrollEnabled = true,\n  ) {\n    if (bookList.isEmpty()) {\n      item { Text(text = \"No books to display\", Modifier.testTag(\"mapDraggableMenuNoBook\")) }\n    } else {\n      itemsIndexed(bookList) { i, book ->\n        BookDisplayComponent(Modifier.testTag(\"mapDraggableMenuBookBox${i}\"), book = book)\n        if (i < bookList.size - 1) {\n          HorizontalDivider(\n              modifier = Modifier.testTag(\"mapDraggableMenuBookBoxDivider\"),\n          )\n        }\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/ui/components/BookListComponent.kt b/app/src/main/java/com/android/bookswap/ui/components/BookListComponent.kt
--- a/app/src/main/java/com/android/bookswap/ui/components/BookListComponent.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/ui/components/BookListComponent.kt	(date 1731613845435)
@@ -14,6 +14,7 @@
 import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.unit.Dp
 import com.android.bookswap.data.DataBook
+import com.android.bookswap.ui.books.BookProfileScreen
 
 val DIVIDER_THICKNESS_DP = Dp.Hairline
 
@@ -39,6 +40,7 @@
           HorizontalDivider(
               modifier = Modifier.testTag("mapDraggableMenuBookBoxDivider"),
           )
+          BookProfileScreen(book, {}, {})
         }
       }
     }
Index: app/src/main/java/com/android/bookswap/data/source/network/BookFirestoreSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.android.bookswap.data.source.network\n\nimport android.util.Log\nimport com.android.bookswap.data.BookGenres\nimport com.android.bookswap.data.BookLanguages\nimport com.android.bookswap.data.DataBook\nimport com.android.bookswap.data.repository.BooksRepository\nimport com.google.android.gms.tasks.Task\nimport com.google.firebase.Firebase\nimport com.google.firebase.auth.auth\nimport com.google.firebase.firestore.DocumentSnapshot\nimport com.google.firebase.firestore.FirebaseFirestore\nimport java.util.UUID\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\n// A class that implements the BooksRepository interface using Firebase Firestore as the data source\nclass BooksFirestoreSource(private val db: FirebaseFirestore) : BooksRepository {\n\n  // Name of the Firestore collection that stores books\n  private val collectionBooks = \"Books\"\n\n  private val books_ = MutableStateFlow<List<DataBook>>(emptyList())\n  val books: StateFlow<List<DataBook>> = books_.asStateFlow()\n\n  // Selected todo, i.e the todo for the detail view\n  private val selectedBook_ = MutableStateFlow<DataBook?>(null)\n  val selectedBook: StateFlow<DataBook?> = selectedBook_.asStateFlow()\n  // Use this code in editBookScreen and modify the editBookScreen structure if needed when\n  // incorporating in the app navigation\n\n  override fun init(onSuccess: () -> Unit) {\n    Firebase.auth.addAuthStateListener {\n      if (it.currentUser != null) {\n        onSuccess()\n      }\n    }\n  }\n\n  override fun getNewUUID(): UUID {\n    return UUID.randomUUID()\n  }\n\n  override fun getBook(callback: (Result<List<DataBook>>) -> Unit) {\n    db.collection(collectionBooks).get().addOnCompleteListener { task ->\n      if (task.isSuccessful) {\n        // Maps Firestore documents to DataBook objects or returns an empty list\n        val books = task.result?.mapNotNull { document -> documentToBooks(document) } ?: emptyList()\n        callback(Result.success(books))\n      } else {\n        task.exception?.let { e -> callback(Result.failure(e)) }\n      }\n    }\n  }\n\n  override fun addBook(dataBook: DataBook, callback: (Result<Unit>) -> Unit) {\n    // Check if essential fields are non-null before attempting to save\n    if (dataBook.title.isBlank() ||\n        dataBook.author.isNullOrBlank() ||\n        dataBook.isbn.isNullOrBlank()) {\n      val exception = IllegalArgumentException(\"Missing required book fields.\")\n      Log.e(\"BooksFirestoreRepository\", \"Failed to add book: ${exception.message}\")\n      callback(Result.failure(exception))\n      return\n    }\n\n    Log.d(\"BooksFirestoreRepository\", \"Attempting to add book: ${dataBook.title}\")\n\n    // Attempt to add book to Firestore\n    performFirestoreOperation(\n        db.collection(collectionBooks).document(dataBook.uuid.toString()).set(dataBook)) { result ->\n          if (result.isSuccess)\n              Log.d(\"BooksFirestoreRepository\", \"Book added successfully: ${dataBook.title}\")\n          else {\n            val error = result.exceptionOrNull()!!\n            Log.e(\"BooksFirestoreRepository\", \"Failed to add book: ${error.message}\", error)\n          }\n          callback(result)\n        }\n  }\n\n  override fun updateBook(dataBook: DataBook, callback: (Result<Unit>) -> Unit) {\n    performFirestoreOperation(\n        db.collection(collectionBooks).document(dataBook.uuid.toString()).set(dataBook), callback)\n  }\n\n  override fun deleteBooks(uuid: UUID, dataBook: DataBook, callback: (Result<Unit>) -> Unit) {\n    performFirestoreOperation(\n        db.collection(collectionBooks).document(dataBook.uuid.toString()).delete(), callback)\n  }\n  // Maps a Firestore document to a DataBook object\n  // If any required field is missing, returns null to avoid incomplete objects\n  fun documentToBooks(document: DocumentSnapshot): DataBook? {\n    return try {\n      val uuid = UUID.fromString(document.getString(\"uuid\")) ?: return null\n      val title = document.getString(\"title\") ?: return null\n      val author = document.getString(\"author\")\n      val description = document.getString(\"description\")\n      val rating = document.getLong(\"rating\")\n      val photo = document.getString(\"photo\")\n      val isbn = document.getString(\"isbn\")\n      val languageBook = BookLanguages.valueOf(document.getString(\"language\") ?: return null)\n      val genres = document.get(\"genres\") as? List<String> ?: emptyList()\n      val bookGenres =\n          genres.mapNotNull { genre ->\n            try {\n              BookGenres.valueOf(genre)\n            } catch (e: IllegalArgumentException) {\n              null\n            }\n          }\n      DataBook(\n          uuid, title, author, description, rating?.toInt(), photo, languageBook, isbn, bookGenres)\n    } catch (e: Exception) {\n      null // Return null in case of any exception during the conversion\n    }\n  }\n  /**\n   * Helper function to perform Firestore operations (add, update, delete) Executes the provided\n   * Firestore task and triggers success or failure callbacks\n   */\n  private fun performFirestoreOperation(task: Task<Void>, callback: (Result<Unit>) -> Unit) {\n    task.addOnCompleteListener { result ->\n      if (result.isSuccessful) {\n        callback(Result.success(Unit))\n      } else {\n        result.exception?.let { e -> callback(Result.failure(e)) }\n      }\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/android/bookswap/data/source/network/BookFirestoreSource.kt b/app/src/main/java/com/android/bookswap/data/source/network/BookFirestoreSource.kt
--- a/app/src/main/java/com/android/bookswap/data/source/network/BookFirestoreSource.kt	(revision 474ad79b100bc98d4c9197503f70d76c98c2cb3b)
+++ b/app/src/main/java/com/android/bookswap/data/source/network/BookFirestoreSource.kt	(date 1731613845439)
@@ -89,6 +89,26 @@
     performFirestoreOperation(
         db.collection(collectionBooks).document(dataBook.uuid.toString()).delete(), callback)
   }
+
+  override fun getBooksList(
+      bookList: List<UUID>,
+      callback: (Result<Unit>) -> Unit
+  ): List<DataBook> {
+    val books = mutableListOf<DataBook>()
+    bookList.forEach { uuid ->
+      db.collection(collectionBooks).document(uuid.toString()).get().addOnCompleteListener { task ->
+        if (task.isSuccessful) {
+          task.result?.let { document ->
+            documentToBooks(document)?.let { book -> books.add(book) }
+          }
+        } else {
+          task.exception?.let { e -> callback(Result.failure(e)) }
+        }
+      }
+    }
+    return books
+  }
+
   // Maps a Firestore document to a DataBook object
   // If any required field is missing, returns null to avoid incomplete objects
   fun documentToBooks(document: DocumentSnapshot): DataBook? {
